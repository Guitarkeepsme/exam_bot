import logging
from keyboards.inline.choise_buttons import choice
from keyboards.inline.subjects import russian
from keyboards.inline import callback_data, personal_buttons
from loader import dp, Forms, getting_answers, escaping, parse_modding
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from data.tasks_content import json_imports
from random import randint
from config import connection
from filters import bot_messages


@dp.message_handler(Command('start'))
async def begin(message: Message):
    start_button = InlineKeyboardMarkup()
    start_button.add(InlineKeyboardButton('–ù–∞—á–Ω—ë–º!', callback_data='menu'))
    await message.answer(text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, *"
                              + message.from_user.first_name + "*\! üëã\n"
                              + bot_messages.start_message, reply_markup=start_button)


@dp.callback_query_handler(text='menu', state='*')
async def show_options(call: CallbackQuery, state: FSMContext):
    await state.finish()  # –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
    # –≤–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ–º id
    with connection.cursor() as cursor:
        cursor.execute('INSERT INTO users (id) VALUES (%s) ON CONFLICT (id) DO NOTHING', (call.from_user.id,))
        connection.commit()
    await call.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è:", reply_markup=choice)


@dp.callback_query_handler(text_contains="russian_options", state='*')
async def choosing_russian(call: CallbackQuery, state: FSMContext):
    await state.finish()  # –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
    await call.answer(cache_time=60)
    callback_data_russian = call.data
    logging.info(f"call = {callback_data_russian}")
    await call.message.answer(text="–•–æ—Ä–æ—à–æ\. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=russian.rus_start)


@dp.callback_query_handler(text_contains="rus_tasks", state='*')
async def russian_task_choosing(call: CallbackQuery, state: FSMContext):
    await state.finish()  # –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
    await call.answer(cache_time=60)
    callback_data_rus_tasks = call.data
    logging.info(f"call = {callback_data_rus_tasks}")
    await call.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ *–Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è*", reply_markup=russian.rus_task)


@dp.callback_query_handler(callback_data.rus_task_callback.filter(task="rus_task"))
async def russian_task(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await state.finish()  # –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
    back_button = InlineKeyboardMarkup()
    back_button.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='rus_tasks'))
    await call.answer(cache_time=60)
    logging.info(f"call = {callback_data}")
    number = callback_data.get("number")
    all_tasks = (json_imports.rus_content.get(number))
    solved = []
    with connection.cursor() as cursor:
        cursor.execute('SELECT problem_id FROM actions WHERE user_id = (%s) AND is_solved = true', (call.from_user.id,))
        cursor.fetchall()
        if cursor.fetchall():
            solved.extend(cursor.fetchall()[0])
        connection.commit()
    random_task = all_tasks[randint(0, len(all_tasks) - 1)]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ø–∞–ª–æ—Å—å –ª–∏ —Ä–µ—à—ë–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–Ω–æ–≤–∞
    while random_task in solved:
        random_task = all_tasks[randint(0, len(all_tasks) - 1)]
    task_head = escaping(str(random_task.get("head")))
    task_text = escaping(str(random_task.get("text")))
    async with state.proxy() as task:
        task['subject'] = 'russian'
        task['solution'] = random_task.get('solution')
        task['number'] = int(number)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–∏–º–µ—Ä—ã
        task['task'] = random_task  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await call.message.answer(text="__–ó–∞–¥–∞–Ω–∏–µ " + str(number) + "__" + parse_modding(task_head))
    await call.message.answer(text=parse_modding(task_text))
    await call.message.answer(text="\n\n–ó–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç *–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤*", reply_markup=back_button)
    await Forms.task.set()  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è

    # "__–ó–∞–¥–∞–Ω–∏–µ " + str(escaping(number)) + "__"
    # + escaping(task_head) + "\n" +
    # escaping(task_text) +  # —Ñ—É–Ω–∫—Ü–∏—è escaping –Ω—É–∂–Ω–∞ –¥–ª—è —Ç–æ–≥–æ,
    # # —á—Ç–æ–±—ã —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–º–æ–¥–æ–º —Å–∏–º–≤–æ–ª—ã
    # "\n\n–ó–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç *–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤*"


@dp.message_handler(lambda message: message.text, state=Forms.task)
async def task_answer(message: Message, state: FSMContext):
    solution_key = InlineKeyboardMarkup(row_width=2)
    solution_key.add(InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—à–µ–Ω–∏–µ', callback_data='solution'))
    async with state.proxy() as task:
        num = task['number']
        answer = task['task'].get('answer')
        task_id = task['task'].get('id')
        subject = task['subject']
        answers = getting_answers(answer)  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
        if message.text.lower() in answers:
            with connection.cursor() as cursor:
                cursor.execute('INSERT INTO actions (problem_id, user_id, subject, number, is_solved) '
                               'VALUES ((%s), (%s), (%s), (%s), true)', (task_id, message.from_user.id, subject, num))
                connection.commit()
            # await state.finish()  # –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await message.reply("–û—Ç–≤–µ—Ç –≤–µ—Ä–µ–Ω\!\n\n\n–í—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ?",
                                reply_markup=russian.correct_answer_options)
        else:
            with connection.cursor() as cursor:
                cursor.execute('INSERT INTO actions (problem_id, user_id, subject, number, is_solved) '
                               'VALUES ((%s), (%s), (%s), (%s), false)', (task_id, message.from_user.id, subject, num))
                connection.commit()
            await message.reply("–í–∞—à –æ—Ç–≤–µ—Ç *" + message.text + "*\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " + "||" +
                                str(answers) + "||",
                                reply_markup=solution_key)  # –∞ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–µ–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–∂–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@dp.callback_query_handler(text_contains='another_task', state=Forms.task)
async def another_task(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as task:
        current_number = task['number']
    callback_data = {'number': str(current_number)}
    await russian_task(call, callback_data, state)


@dp.callback_query_handler(text='solution', state=Forms.task)
async def get_solution(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as task:
        solution = task['solution']
    solution_parsed = escaping(str(solution))
    await call.message.answer(parse_modding(solution_parsed))


@dp.callback_query_handler(text_contains="math")
async def choosing_russian(call: CallbackQuery):
    await call.answer(cache_time=60)
    callback_data_math = call.data
    logging.info(f"call = {callback_data_math}")

    await call.message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞ *–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*. –í—ã –º–æ–∂–µ—Ç–µ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º.",
                              parse_mode="Markdown")


@dp.callback_query_handler(text_contains="social")
async def choosing_russian(call: CallbackQuery):
    await call.answer(cache_time=60)
    callback_data_social = call.data
    logging.info(f"call = {callback_data_social}")

    await call.message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞ *–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*. –í—ã –º–æ–∂–µ—Ç–µ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º.",
                              parse_mode="Markdown")


@dp.callback_query_handler(text_contains="biology")
async def choosing_russian(call: CallbackQuery):
    await call.answer(cache_time=60)
    callback_data_biology = call.data
    logging.info(f"call = {callback_data_biology}")

    await call.message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞ *–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*. –í—ã –º–æ–∂–µ—Ç–µ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º.",
                              parse_mode="Markdown")


@dp.callback_query_handler(text_contains="physics")
async def choosing_russian(call: CallbackQuery):
    await call.answer(cache_time=60)
    callback_data_physics = call.data
    logging.info(f"call = {callback_data_physics}")

    await call.message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞ *–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*. –í—ã –º–æ–∂–µ—Ç–µ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º.",
                              parse_mode="Markdown")


@dp.callback_query_handler(text_contains="computer")
async def choosing_russian(call: CallbackQuery):
    await call.answer(cache_time=60)
    callback_data_computer = call.data
    logging.info(f"call = {callback_data_computer}")

    await call.message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞ *–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*. –í—ã –º–æ–∂–µ—Ç–µ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º.",
                              parse_mode="Markdown")


@dp.callback_query_handler(text_contains="history")
async def choosing_russian(call: CallbackQuery):
    await call.answer(cache_time=60)
    callback_data_history = call.data
    logging.info(f"call = {callback_data_history}")

    await call.message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞ *–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*. –í—ã –º–æ–∂–µ—Ç–µ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º.",
                              parse_mode="Markdown")


@dp.callback_query_handler(text_contains="foreign")
async def choosing_russian(call: CallbackQuery):
    await call.answer(cache_time=60)
    callback_data_foreign = call.data
    logging.info(f"call = {callback_data_foreign}")

    await call.message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞ *–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*. –í—ã –º–æ–∂–µ—Ç–µ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º.",
                              parse_mode="Markdown")


@dp.callback_query_handler(text_contains="chemistry")
async def choosing_russian(call: CallbackQuery):
    await call.answer(cache_time=60)
    callback_data_chemistry = call.data
    logging.info(f"call = {callback_data_chemistry}")

    await call.message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞ *–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*. –í—ã –º–æ–∂–µ—Ç–µ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º.",
                              parse_mode="Markdown")


@dp.callback_query_handler(text_contains="literature")
async def choosing_russian(call: CallbackQuery):
    await call.answer(cache_time=60)
    callback_data_literature = call.data
    logging.info(f"call = {callback_data_literature}")

    await call.message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞ *–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*. –í—ã –º–æ–∂–µ—Ç–µ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º.",
                              parse_mode="Markdown")


@dp.callback_query_handler(text_contains="geography")
async def choosing_russian(call: CallbackQuery):
    await call.answer(cache_time=60)
    callback_data_geography = call.data
    logging.info(f"call = {callback_data_geography}")

    await call.message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞ *–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*. –í—ã –º–æ–∂–µ—Ç–µ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º.",
                              parse_mode="Markdown")


@dp.callback_query_handler(text="stats")
async def stats(call: CallbackQuery):
    await call.answer(cache_time=60)
    callback_data_stats = call.data
    logging.info(f"call = {callback_data_stats}")
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ "
                              "—É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:", reply_markup=personal_buttons.personal_account)


# @dp.callback_query_handler(text_contains='back_to_menu', state='*')
# async def back_from_stats(call: CallbackQuery, state: FSMContext):
#     await state.finish()
#     await show_options(call.message, state)

# ,
#                            state=Forms.personal_account
@dp.callback_query_handler(callback_data.personal_account_callback.filter(subject='russian_stats'))
async def personal_account_subject(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await Forms.personal_account.set()  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
    await call.answer(cache_time=60)
    callback_data_stats = call.data
    logging.info(f"call = {callback_data_stats}")
    subject = callback_data.get('subject').replace('_stats', '')
    async with state.proxy() as info:
        info['subject'] = subject
    total_amount = 0  # —Å—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∑–∞–¥–∞—á —Ä–µ—à–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    total_true = 0
    total_false = 0
    with connection.cursor() as cursor:
        # –ó–∞–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∑–∞–¥–∞—á —Ä–µ—à–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute('SELECT COUNT (problem_id) FROM actions WHERE user_id = (%s) AND subject = (%s)',
                       (call.from_user.id, subject,))
        current = cursor.fetchall()[0][0]  # –ø–æ—á–µ–º—É –Ω—É–∂–Ω–æ –¥–≤–∞ –Ω—É–ª—è???
        total_amount += current
    with connection.cursor() as cursor:
        cursor.execute('SELECT COUNT (problem_id) FROM actions WHERE user_id = (%s)'
                       ' AND is_solved = true AND subject = (%s)', (call.from_user.id, subject,))
        current_true = cursor.fetchall()[0][0]
        total_true += current_true
    with connection.cursor() as cursor:
        cursor.execute('SELECT COUNT (problem_id) FROM actions WHERE user_id = (%s)'
                       ' AND is_solved = false AND subject = (%s)', (call.from_user.id, subject,))
        current_false = cursor.fetchall()[0][0]
        total_false += current_false
    await call.message.answer("__–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É__\n\n\n–í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: *" + str(total_amount)
                              + "*\n–ò–∑ –Ω–∏—Ö —Ä–µ—à–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ: *" + str(total_true) + "*\n–î–æ–ø—É—â–µ–Ω–æ –æ—à–∏–±–æ–∫: *"
                              + str(total_false) + "*\n\n\n–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∑–∞–¥–∞–Ω–∏—é, "
                                                   "–Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\.",
                              reply_markup=personal_buttons.back_buttons)


@dp.message_handler(state=Forms.personal_account)
async def problem_stats(message: Message, state: FSMContext):
    if message.text.isdigit():
        async with state.proxy() as info:
            subject = info['subject']
            false = 0
            true = 0
            total = 0
            with connection.cursor() as cursor:
                cursor.execute('SELECT COUNT (problem_id) FROM actions WHERE user_id = (%s)'
                               'AND is_solved = false AND subject = (%s) AND number = (%s)',
                               (message.from_user.id, subject, int(message.text)))
                current_false = cursor.fetchall()[0][0]
                false += current_false
            with connection.cursor() as cursor:
                cursor.execute('SELECT COUNT (problem_id) FROM actions WHERE user_id = (%s)'
                               'AND is_solved = true AND subject = (%s) AND number = (%s)',
                               (message.from_user.id, subject, int(message.text)))
                current_true = cursor.fetchall()[0][0]
                true += current_true
            with connection.cursor() as cursor:
                cursor.execute('SELECT COUNT (problem_id) FROM actions WHERE user_id = (%s) '
                               'AND subject = (%s) AND number = (%s)',
                               (message.from_user.id, subject, int(message.text)))
                current_total = cursor.fetchall()[0][0]
                total += current_total
            if total == 0:
                await message.answer("–í—ã –µ—â—ë *–Ω–µ –ø—Ä–∏—Å—Ç—É–ø–∞–ª–∏* –∫ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é –∏–ª–∏ —Ç–∞–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è *–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç*\."
                                     , reply_markup=personal_buttons.back_buttons)
            else:
                await message.answer("__–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é__\n\n\n–í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: *" + str(total)
                                     + "*\n–ò–∑ –Ω–∏—Ö —Ä–µ—à–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ: *" + str(true) + "*\n–î–æ–ø—É—â–µ–Ω–æ –æ—à–∏–±–æ–∫: *"
                                     + str(false) + "*", reply_markup=personal_buttons.back_buttons)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞\.")


@dp.callback_query_handler(callback_data.russian_main_callback.filter(option='rus_test'), state='*')
async def russian_test(call: CallbackQuery, state: FSMContext):
    back_button = InlineKeyboardMarkup()
    back_button.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='russian_options'))
    await state.finish()
    await call.message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –∂–¥–∏—Ç–µ\.", reply_markup=back_button)

